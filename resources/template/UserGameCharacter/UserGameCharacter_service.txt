      
 public class SystemCenterService
    {
	   WeiXinEntities context = new WeiXinEntities();

	   #region begin UserGameCharacter

       public int GetUserGameCharacterTotalCount(GameId gameId)
{
Expression<Func<UserGameCharacter, bool>> predicate = a => a.GameId == (long)gameId;
int totalCount = 0;
totalCount = context.UserGameCharacter.Where(predicate).Count();
return totalCount;
}
public List<UserGameCharacterAdminModel> GetUserGameCharacterList(GameId gameId,int skip, int pageSize)
{
{List<UserGameCharacter> list = null;
Expression<Func<UserGameCharacter, bool>> predicate = a => a.GameId == (long)gameId;
list =  context.UserGameCharacter.Where(predicate).OrderByDescending(a => a.UserCharacterId).Skip(skip).Take(pageSize).ToList();
var modellist = AutoMapper.To<List<UserGameCharacter>, List<UserGameCharacterAdminModel>>(list);
return modellist;
}


       

		public bool DeleteUserGameCharacter(int id, int m)
        { 
               var usergamecharacter=new UserGameCharacter(){ UserCharacterId=id, IsDelete=m };
               var entry = context.Entry(usergamecharacter);
               context.Set<UserGameCharacter>().Attach(usergamecharacter);
               entry.Property("IsDelete").IsModified = true;
              int rtn= context.SaveChanges();
              return rtn > 0;
        }


		 public bool SaveUserGameCharacter(UserGameCharacterAdminModel data)
        {
           var domaindata=  AutoMapper.To<UserGameCharacterAdminModel, UserGameCharacter>(data);
            context.UserGameCharacter.Add(domaindata);
            var rtn= context.SaveChanges();
            return true;
        }

		 public bool ModUserGameCharacter(UserGameCharacterAdminModel data)
        {
            var domaindata=  AutoMapper.To<UserGameCharacterAdminModel, UserGameCharacter>(data);
            var entry = context.Entry(domaindata);
            context.Set<UserGameCharacter>().Attach(domaindata);
            entry.State = EntityState.Modified;
            int rtn = context.SaveChanges();
            return rtn > 0;
        }

	    public UserGameCharacter GetUserGameCharacter(int id)
        {
            var model = context.UserGameCharacter.Find(id);
            return model;
        }



		#endregion end UserGameCharacter

		}
